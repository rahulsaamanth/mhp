// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole{
  ADMIN
  USER
}

enum UserStatus{
  ACTIVE
  INACTIVE
  SUSPENDED
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  status        UserStatus @default(ACTIVE)
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  phone String?
  shippingAddress String?
  billingAddress String?
  orders Order[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken{
  id String @id @default(cuid())
  email String 
  token String @unique
  expires DateTime

  @@unique([email,token])
}

model PasswordResetToken{
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email,token])
}

model TwoFactorToken{
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email,token])
}

model TwoFactorConfirmation{
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Product{
  id String @id @default(cuid())
  name String
  description String
  price Float
  stock Int
  image String?
  category Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  brand Brand @relation(fields: [brandId], references: [id])
  brandId String
  orderDetails OrderDetails[]
  properties Json?
}

model Category{
  id String @id @default(cuid())
  name String
  parent Category? @relation("SubCategories", fields: [parentId], references: [id])
  parentId String? 
  subCategories Category[] @relation("SubCategories")
  products Product[]
}

model Brand{
  id String @id @default(cuid())
  name String
  products Product[]
}

model Order{
  id String @id @default(cuid())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String 
  orderDate DateTime
  totalAmountPaid Float
  orderDetails OrderDetails[]
}

model OrderDetails{
  id String @id @default(cuid())
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String
  product Product @relation(fields: [productId], references: [id], onDelete: Restrict)
  productId String
  quantity Int
  unitPrice Float

  @@index([orderId], name:"orderId")
  @@index([productId], name:"productId")
}
