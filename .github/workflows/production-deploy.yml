name: Deploy Next.js to EC2
on:
  push:
    branches: ["main"]
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Node.js first
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.11.0"

      # Test connection to EC2 using SSH
      - name: Test SSH connection
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            echo "SSH connection established"
            exit 0

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            # Explicitly set home directory and source profile
            export HOME=/home/$USER
            source $HOME/.bashrc
            source $HOME/.profile

            # Find the actual paths of the commands with more robust method
            NODE_PATH=$(command -v node)
            NPM_PATH=$(command -v npm)
            PNPM_PATH=$(command -v pnpm)
            PM2_PATH=$(command -v pm2)

            # Print out detailed environment information
            echo "Current USER: $USER"
            echo "HOME directory: $HOME"
            echo "Current PATH: $PATH"
            echo "Node path: $NODE_PATH"
            echo "NPM path: $NPM_PATH"
            echo "PNPM path: $PNPM_PATH"
            echo "PM2 path: $PM2_PATH"

            # Check if NVM is installed and source it if available
            if [ -f "$HOME/.nvm/nvm.sh" ]; then
              echo "Sourcing NVM..."
              source "$HOME/.nvm/nvm.sh"
              nvm use default
            fi

            # Navigate to project directory
            cd /var/www/nextjs/mhp || { echo "Directory not found"; exit 1; }


            # Ensure the repository is up-to-date with the main branch
            echo "Rebasing to main branch..."
            git fetch origin main || { echo "Failed to fetch main branch"; exit 1; }
            git reset --hard origin/main || { echo "Git rebase failed"; exit 1; }

            # Now create configuration files
            echo "Creating configuration files..."

            # Create .env file
            cat > .env << EOL || { echo "Failed to create .env file"; exit 1; }
            DATABASE_URL="${{ secrets.DATABASE_URL }}"
            AUTH_SECRET="${{ secrets.AUTH_SECRET }}"
            RESEND_API_KEY="${{ secrets.RESEND_API_KEY }}"
            AWS_BUCKET_NAME="${{ secrets.AWS_BUCKET_NAME }}"
            AWS_BUCKET_REGION="${{ secrets.AWS_BUCKET_REGION }}"
            AWS_ACCESS_KEY="${{ secrets.AWS_ACCESS_KEY }}"
            AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            PUBLIC_APP_URL="${{ secrets.PUBLIC_APP_URL }}"
            EOL

            # Create .npmrc file
            # cat > .npmrc << EOL || { echo "Failed to create .npmrc file"; exit 1; }
            # @rahulsaamanth:registry=https://npm.pkg.github.com
            # //npm.pkg.github.com/:_authToken=${{ secrets.GH_TOKEN }}
            # EOL

            # Set proper permissions
            chmod 600 .env || { echo "Failed to set file permissions"; exit 1; }            

            # Verify binary existence and versions
            echo "Node version:"
            $NODE_PATH --version || echo "Node command failed"

            echo "NPM version:"
            $NPM_PATH --version || echo "NPM command failed"

            echo "PNPM version:"
            $PNPM_PATH --version || echo "PNPM command failed"

            echo "PM2 version:"
            $PM2_PATH --version || echo "PM2 command failed"

            # Clean up existing build and dependencies
            echo "Cleaning up previous build..."
            rm -rf .next || { echo "Failed to remove .next directory"; exit 1; }
            rm -rf node_modules || { echo "Failed to remove node_modules"; exit 1; }

            # Install dependencies with full path fallback
            echo "Installing dependencies..."
            $PNPM_PATH store prune && $PNPM install || {
              echo "PNPM install failed with full path. Trying alternative..."
              pnpm store prune && pnpm install || {
                echo "PNPM install failed completely"
                exit 1
              }
            }            


            # Build the project with full path fallback
            echo "Building the project..."
            $PNPM_PATH run build || {
              echo "PNPM build failed with full path. Trying alternative..."
              pnpm run build || {
                echo "PNPM build failed completely"
                exit 1
              }
            }

            # PM2 process management
            echo "Checking PM2 process..."
            if $PM2_PATH list | grep -q mhp; then
              echo "Restarting existing PM2 process..."
              $PM2_PATH restart mhp || pm2 restart mhp
            else
              echo "Starting new PM2 process..."
              $PM2_PATH start $PNPM_PATH --name "mhp" -- start || pm2 start $PNPM_PATH --name "mhp" -- start
            fi

            echo "Deployment completed"
